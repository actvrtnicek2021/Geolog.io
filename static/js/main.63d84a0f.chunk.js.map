{"version":3,"sources":["logo.svg","../public/Images sync /^/.*$","../public/Images/amphibole1.jpg","../public/Images/amphibole2.jpg","../public/Images/azurite1.jpg","../public/Images/barite1.jpg","../public/Images/barite2.jpg","../public/Images/calcite1.jpg","../public/Images/calcite2.jpg","../public/Images/chlorite1.jpg","../public/Images/chlorite2.jpg","../public/Images/dolomite1.jpg","../public/Images/feldspar1.jpg","../public/Images/feldspar2.jpg","../public/Images/fluorite1.jpg","../public/Images/fluorite2.jpg","../public/Images/galena1.jpg","../public/Images/galena2.jpg","../public/Images/garnet1.jpg","../public/Images/garnet2.jpg","../public/Images/garnet3.jpg","../public/Images/graphite1.jpg","../public/Images/gypsum1.jpg","../public/Images/gypsum2.jpg","../public/Images/gypsum3.jpg","../public/Images/halite1.jpg","../public/Images/halite2.jpg","../public/Images/hematite1.jpg","../public/Images/hematite2.jpg","../public/Images/kyanite1.jpg","../public/Images/kyanite2.jpg","../public/Images/magnetite1.jpg","../public/Images/malachite1.jpg","../public/Images/mica1.jpg","../public/Images/mica2.jpg","../public/Images/olivine1.jpg","../public/Images/pyrite1.jpg","../public/Images/pyrite2.jpg","../public/Images/pyroxene1.jpg","../public/Images/pyroxene2.jpg","../public/Images/quartz1.jpg","../public/Images/quartz2.jpg","../public/Images/tourmaline1.jpg","../public/Images/tourmaline2.jpg","Start/start.js","Form/preferencesLists.js","Form/form.js","Game/mineralList.js","Game/game.js","Aftergame/aftergame.js","Game/pop-up/pop-up.js","Page/page.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Start","props","handleClick","bind","this","changePage","page","className","onClick","React","Component","abundanceLevels","common","rare","mineralTypes","volcanic","metamorphic","ore","other","hardMinerals","mica","feldspar","pyroxene","aphibole","Form","state","basic","hard","all","roundsAfterWrong","guesses","show","show2","customList","allMinerals","customMinerals","unselectedMinerals","visual","text","handleSubmit","handleChange","handleClick2","handleChange2","list","filter","choice","event","newList","modeType","filterChoices","difficultyList","abundanceList","mineralTypeList","includes","type","mergeMineralLists","temporaryList","Array","from","concat","mineral","splice","indexOf","custom","item","forEach","inputRounds","parseInt","inputGuesses","changePreferences","preventDefault","otherChoices","isGoingEmpty","newState","name","target","value","checked","setState","volAndMeta","makeCustomList","newCustomMinerals","newUnselectedMinerals","push","list1","list2","mergedList","currentName","currentValue","allList","level","mineralChecked","assign","makeMineralOptions","mineralList","sort","onChange","advancedShow","display","onSubmit","style","min","step","required","quartz","clues","properties","hardness","streak","reactionWithAcid","pyrite","cinnabar","halite","calcite","malachite","tourmaline","biotite","garnet","plagioclase","alkali_feldspars","muscovite","hematite","baryte","fluorite","aragonite","dolomite","Game","shownClues","shownProps","shownPropTypes","image1","image2","image3","image4","buttonHard","buttonStreak","buttonAcid","testUse","displayedPictures","gameType","answer","chosenMineral","guessNumber","newCompareWith","capitaliseFirst","src","process","width","updateWrongAnswers","chosenPicture","updateSelect","resetGuessNumber","changePopup","chosenImage","i","No","imageName","changeAnswer","newImageSet","newImage1Set","submitted","imageChecked","imageArray","index","imageX","imageY","imageZ","variableSet","newVariableSet","variable","imageNumber","charAt","toUpperCase","slice","newClue","length","Math","floor","random","chosenClue","removeClues","prop","property","testUseVar","testLimit","undefined","err","newShownProps","newShownPropTypes","resetShownClues","changeResetShownClues","optionsList","updatedList","clues_list","unshift","displayedClues","clue","displayedProps","mode","maxScale","displayedImages","randomArray","currentImages","image_array","mineralName","split","character","isNaN","toString","replace","height","Aftergame","column","row","changeMineral","resetSelect","annulateMinList","selectValue","mineralID","answerValidation","options","minListLength","select","activated","compareWith","Popup","randomMineral","updatedMinList","getKeyByValue","object","find","key","Page","wrong","currentList","showPopup","firstWrong","chosenClues","game","picturesLog","newPage","newAnswer","wrongPicture","wrongAnswer","randomPicture","newPictureLog","wrongList","foundWrong","values","randomNumber","findAvailable","maximumAchieved","counter","tryRequire","path","require","availableList","availableMinList","wrongMineral","cluesList","newArray","preferredMinerals","newArrayElement","randomClue","newChosenPicture","newGuessNumber","newGame","comparingMineral","trueOrFalse","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.63d84a0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var map = {\n\t\"./amphibole1.jpg\": 41,\n\t\"./amphibole2.jpg\": 42,\n\t\"./azurite1.jpg\": 43,\n\t\"./barite1.jpg\": 44,\n\t\"./barite2.jpg\": 45,\n\t\"./calcite1.jpg\": 46,\n\t\"./calcite2.jpg\": 47,\n\t\"./chlorite1.jpg\": 48,\n\t\"./chlorite2.jpg\": 49,\n\t\"./dolomite1.jpg\": 50,\n\t\"./feldspar1.jpg\": 51,\n\t\"./feldspar2.jpg\": 52,\n\t\"./fluorite1.jpg\": 53,\n\t\"./fluorite2.jpg\": 54,\n\t\"./galena1.jpg\": 55,\n\t\"./galena2.jpg\": 56,\n\t\"./garnet1.jpg\": 57,\n\t\"./garnet2.jpg\": 58,\n\t\"./garnet3.jpg\": 59,\n\t\"./graphite1.jpg\": 60,\n\t\"./gypsum1.jpg\": 61,\n\t\"./gypsum2.jpg\": 62,\n\t\"./gypsum3.jpg\": 63,\n\t\"./halite1.jpg\": 64,\n\t\"./halite2.jpg\": 65,\n\t\"./hematite1.jpg\": 66,\n\t\"./hematite2.jpg\": 67,\n\t\"./kyanite1.jpg\": 68,\n\t\"./kyanite2.jpg\": 69,\n\t\"./magnetite1.jpg\": 70,\n\t\"./malachite1.jpg\": 71,\n\t\"./mica1.jpg\": 72,\n\t\"./mica2.jpg\": 73,\n\t\"./olivine1.jpg\": 74,\n\t\"./pyrite1.jpg\": 75,\n\t\"./pyrite2.jpg\": 76,\n\t\"./pyroxene1.jpg\": 77,\n\t\"./pyroxene2.jpg\": 78,\n\t\"./quartz1.jpg\": 79,\n\t\"./quartz2.jpg\": 80,\n\t\"./tourmaline1.jpg\": 81,\n\t\"./tourmaline2.jpg\": 82\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 40;","module.exports = __webpack_public_path__ + \"static/media/amphibole1.fc3d748c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/amphibole2.7eff37bf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/azurite1.c8cf4c35.jpg\";","module.exports = __webpack_public_path__ + \"static/media/barite1.e4a8f6d3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/barite2.686fbc99.jpg\";","module.exports = __webpack_public_path__ + \"static/media/calcite1.d68376ac.jpg\";","module.exports = __webpack_public_path__ + \"static/media/calcite2.1a49e835.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chlorite1.721affee.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chlorite2.26646c43.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dolomite1.d9fdd365.jpg\";","module.exports = __webpack_public_path__ + \"static/media/feldspar1.c6fd8654.jpg\";","module.exports = __webpack_public_path__ + \"static/media/feldspar2.5ce6b21e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fluorite1.1084f6ec.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fluorite2.ed0b7aeb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galena1.1196f446.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galena2.05ed1d70.jpg\";","module.exports = __webpack_public_path__ + \"static/media/garnet1.4aee08cc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/garnet2.841f34ac.jpg\";","module.exports = __webpack_public_path__ + \"static/media/garnet3.f1af6e90.jpg\";","module.exports = __webpack_public_path__ + \"static/media/graphite1.0d532ef7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gypsum1.dcddc92f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gypsum2.85e283c7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gypsum3.def5dc09.jpg\";","module.exports = __webpack_public_path__ + \"static/media/halite1.8ee7a521.jpg\";","module.exports = __webpack_public_path__ + \"static/media/halite2.ce049e59.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hematite1.4b93a23c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hematite2.f60824ef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kyanite1.7c9aba9d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kyanite2.ed96a57a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/magnetite1.8659be4d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/malachite1.1f383dee.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mica1.22888358.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mica2.f041ca21.jpg\";","module.exports = __webpack_public_path__ + \"static/media/olivine1.482b5940.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pyrite1.63b4a506.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pyrite2.2eeedb45.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pyroxene1.cba4d12f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pyroxene2.2b006475.jpg\";","module.exports = __webpack_public_path__ + \"static/media/quartz1.f2d05100.jpg\";","module.exports = __webpack_public_path__ + \"static/media/quartz2.ff9205e7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tourmaline1.ea879554.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tourmaline2.a6a53fdf.jpg\";","import React from 'react';\r\nimport './start.css';\r\n\r\nexport class Start extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n    handleClick () {\r\n        this.props.changePage('form');\r\n    }\r\n    render () {\r\n        if (this.props.page === 'start') {\r\n            return (\r\n                <div className='start'>\r\n                    <h1>Mineral Detective</h1>\r\n                    <button onClick={this.handleClick}>Start</button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<div></div>);\r\n        }\r\n    }\r\n}","export const abundanceLevels = {\r\n    common: ['halite', 'calcite', 'pyroxene', 'amphibole', 'quartz', 'mica', 'feldspar', 'fluorite', 'hematite', 'olivine', 'garnet', 'pyrite', 'gypsum', 'chlorite'],\r\n    rare: ['tourmaline', 'malachite', 'dolomite', 'diamond', 'barite', 'magnetite', 'azurite', 'galena', 'kyanite', 'graphite']\r\n};\r\n\r\nexport const mineralTypes = {\r\n    volcanic: ['olivine', 'feldspar', 'pyroxene', 'amphibole', 'quartz',  'mica',  'tourmaline', 'diamond'],\r\n    metamorphic: ['pyroxene', 'amphibole',  'quartz', 'mica', 'chlorite', 'garnet', 'kyanite', 'graphite'],\r\n    ore: ['magnetite', 'hematite', 'pyrite', 'malachite', 'azurite', 'galena', 'barite', 'fluorite'],\r\n    other: ['halite', 'calcite', 'gypsum', 'dolomite']\r\n};\r\n\r\nexport const hardMinerals = {\r\n    mica: ['biotite', 'muscovite'],\r\n    feldspar: ['plagioclase', 'alkali feldspars'],\r\n    pyroxene: ['augite', 'diopside'],\r\n    aphibole: ['hornblende', 'actinolite']\r\n};","import React from 'react';\r\nimport './form.css';\r\nimport {abundanceLevels, mineralTypes, hardMinerals} from './preferencesLists';\r\n\r\nexport class Form extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            basic: true,\r\n            hard: false,\r\n            common: true,\r\n            rare: false,\r\n            all: true,\r\n            volcanic: false,\r\n            metamorphic: false,\r\n            ore: false,\r\n            other: false,\r\n            roundsAfterWrong: 2,\r\n            guesses: 1,\r\n            show: false,\r\n            show2: false,\r\n            customList: <div></div>,\r\n            allMinerals: [],\r\n            customMinerals: [],\r\n            unselectedMinerals: [],\r\n            visual: true,\r\n            text: false\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleClick2 = this.handleClick2.bind(this);\r\n        this.handleChange2 = this.handleChange2.bind(this);\r\n    }\r\n    filterChoices (list) {\r\n        return list.filter(choice => this.state[choice] === true);\r\n    }\r\n    handleSubmit (event) {\r\n        this.props.changePage('game');\r\n        let newList = [];\r\n        let modeType = this.filterChoices(['visual', 'text']);\r\n        let difficultyList = this.filterChoices(['basic', 'hard']);\r\n        let abundanceList = this.filterChoices(['common', 'rare']);\r\n        let mineralTypeList = this.filterChoices(['all','volcanic', 'metamorphic','ore', 'other']);\r\n        if (mineralTypeList.includes('all')) {\r\n            for (let type in mineralTypes) {\r\n                newList = this.mergeMineralLists(newList, mineralTypes[type]);\r\n            };\r\n        };\r\n        if (mineralTypeList.includes('volcanic')) {\r\n            newList = this.mergeMineralLists(newList, mineralTypes.volcanic);\r\n        };\r\n        if (mineralTypeList.includes('metamoprhic')) {\r\n            newList = this.mergeMineralLists(newList, mineralTypes.metamorphic);\r\n        };\r\n        if (mineralTypeList.includes('ore')) {\r\n            newList = this.mergeMineralLists(newList, mineralTypes.ore);\r\n        };\r\n        if (mineralTypeList.includes('other')) {\r\n            newList = this.mergeMineralLists(newList, mineralTypes.other);\r\n        }\r\n        let temporaryList = Array.from(newList);\r\n        newList = [];\r\n        if (abundanceList.includes('common')) {\r\n            newList = newList.concat(temporaryList.filter(mineral => {\r\n                return abundanceLevels.common.includes(mineral) === true;\r\n            }));\r\n        }\r\n        if (abundanceList.includes('rare')) {\r\n            newList = newList.concat(temporaryList.filter(mineral => {\r\n                return abundanceLevels.rare.includes(mineral) === true;\r\n            }));\r\n        }\r\n        if (difficultyList.includes('hard')) {\r\n            for (let mineral in hardMinerals) {\r\n                if (newList.includes(mineral)) {\r\n                    newList.splice(newList.indexOf(mineral), 1)\r\n                    newList = newList.concat(hardMinerals[mineral])\r\n                };\r\n                continue\r\n            };\r\n        };\r\n        let custom = Array.from(this.state.customMinerals)\r\n        custom = custom.filter(item => {\r\n            return newList.includes(item) === false;\r\n        })\r\n        newList = newList.concat(custom)\r\n        let unselected = Array.from(this.state.unselectedMinerals);\r\n        unselected.forEach(mineral => {\r\n            if (newList.includes(mineral)) {\r\n                newList.splice(newList.indexOf(mineral), 1);\r\n            };\r\n        })\r\n        let inputRounds = parseInt(this.state.roundsAfterWrong);\r\n        let inputGuesses = parseInt(this.state.guesses);\r\n        this.props.changePreferences(newList, inputRounds, inputGuesses, modeType[0]);\r\n        event.preventDefault();\r\n    }\r\n    handleChange (event) {\r\n        const name = event.target.name;\r\n        const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        let otherChoices;\r\n        let isGoingEmpty;\r\n        let newState;\r\n        switch (name) {\r\n            case 'visual':\r\n            case 'text':\r\n                newState = name === 'visual' ? {text: !(this.state.text)} : {visual: !(this.state.visual)};\r\n                this.setState(newState);\r\n                break;\r\n            case 'basic':\r\n            case 'hard':\r\n                newState = name === 'basic' ? {hard: !(this.state.hard)} : {basic: !(this.state.basic)};\r\n                this.setState(newState);\r\n                break;\r\n            case 'common':\r\n            case 'rare':\r\n                otherChoices = ['common', 'rare'];\r\n                otherChoices.splice(otherChoices.indexOf(name), 1);\r\n                if (value === false && this.state[otherChoices[0]] === false) {\r\n                    this.setState({[otherChoices[0]]: true});\r\n                };\r\n                break;\r\n            case 'all':\r\n                if (value === true) {\r\n                    this.setState({\r\n                        volAndMeta: false,\r\n                        ore: false,\r\n                        other: false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        volAndMeta: true,\r\n                        ore: true,\r\n                        other: true\r\n                    })\r\n                }\r\n                break;\r\n            case 'volcanic':\r\n            case 'metamorphic':\r\n            case 'ore':\r\n            case 'other':\r\n                otherChoices = ['volcanic', 'metamorphic', 'ore', 'other']\r\n                otherChoices.splice(otherChoices.indexOf(name), 1);\r\n                if (value === true && this.state.all === true) {\r\n                    this.setState({all: false});\r\n                }\r\n                if (value === false) {\r\n                    isGoingEmpty = true;\r\n                    otherChoices.forEach(choice => {\r\n                        if (this.state[choice] === true) {\r\n                            isGoingEmpty = false;\r\n                        };\r\n                    });\r\n                    if (isGoingEmpty === true) {\r\n                        this.setState({all: true})\r\n                    };\r\n                };\r\n                break;\r\n        }\r\n        if (this.state.show2 === true) {\r\n            this.setState({\r\n                [name]: value,\r\n                currentName: name,\r\n                currentValue: value\r\n            }, this.makeCustomList)\r\n        } else {\r\n            this.setState({[name]: value})\r\n        }\r\n    }\r\n    handleChange2 (event) {\r\n        const name = event.target.name;\r\n        const value = event.target.checked;\r\n        if (name === 'openOrClose') {\r\n            this.setState({\r\n                show2: !(this.state.show2)\r\n            })\r\n        } else {\r\n            let newCustomMinerals = Array.from(this.state.customMinerals);\r\n            let newUnselectedMinerals = Array.from(this.state.unselectedMinerals);\r\n            if (value === true) {\r\n                newCustomMinerals.push(name);\r\n                if (newUnselectedMinerals.includes(name)) {\r\n                    newUnselectedMinerals.splice(newUnselectedMinerals.indexOf(name), 1)\r\n                    this.setState({\r\n                        [name]: value,\r\n                        currentName: name,\r\n                        currentValue: value,\r\n                        customMinerals: newCustomMinerals,\r\n                        unselectedMinerals: newUnselectedMinerals\r\n                    }, this.makeCustomList);\r\n                } else {\r\n                    this.setState({\r\n                        [name]: value,\r\n                        currentName: name,\r\n                        currentValue: value,\r\n                        customMinerals: newCustomMinerals\r\n                    }, this.makeCustomList);\r\n                }\r\n            } else if (value === false && newCustomMinerals.includes(name)) {\r\n                newCustomMinerals.splice(newCustomMinerals.indexOf(name), 1);\r\n                newUnselectedMinerals.push(name);\r\n                this.setState({\r\n                    [name]: value,\r\n                    currentName: name,\r\n                    currentValue: value,\r\n                    customMinerals: newCustomMinerals,\r\n                    unselectedMinerals: newUnselectedMinerals\r\n                }, this.makeCustomList);\r\n            } else {\r\n                newUnselectedMinerals.push(name);\r\n                this.setState({\r\n                    [name]: value,\r\n                    unselectedMinerals: newUnselectedMinerals,\r\n                    currentName: name,\r\n                    currentValue: value\r\n                }, this.makeCustomList);\r\n            };\r\n        }\r\n    }\r\n    handleClick (event) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            show: !(this.state.show)\r\n        });\r\n    }\r\n    mergeMineralLists (list1, list2) {\r\n        const mergedList = Array.from(list1);\r\n        list2.forEach(mineral => {\r\n            if (list1.includes(mineral) === false) {\r\n                mergedList.push(mineral);\r\n            };\r\n        });\r\n        return mergedList\r\n    }\r\n    makeCustomList () {\r\n        let newList = [];\r\n        let difficultyList = this.filterChoices(['basic', 'hard']);\r\n        let abundanceList = this.filterChoices(['common', 'rare']);\r\n        let mineralTypeList = this.filterChoices(['all', 'volcanic', 'metamorphic', 'ore', 'other']);\r\n        if (mineralTypeList.includes('all')) {\r\n            for (let type in mineralTypes) {\r\n                newList = this.mergeMineralLists(newList, mineralTypes[type]);\r\n            };\r\n        };\r\n        if (mineralTypeList.includes('volcanic')) {\r\n            newList = this.mergeMineralLists(newList, mineralTypes.volcanic);\r\n        };\r\n        if (mineralTypeList.includes('metamorphic')) {\r\n            newList = this.mergeMineralLists(newList, mineralTypes.metamorphic);\r\n        };\r\n        if (mineralTypeList.includes('ore')) {\r\n            newList = this.mergeMineralLists(newList, mineralTypes.ore);\r\n        };\r\n        if (mineralTypeList.includes('other')) {\r\n            newList = this.mergeMineralLists(newList, mineralTypes.other);\r\n        }\r\n        let temporaryList = Array.from(newList);\r\n        newList = [];\r\n        if (abundanceList.includes('common')) {\r\n            newList = newList.concat(temporaryList.filter(mineral => {\r\n                return abundanceLevels.common.includes(mineral) === true;\r\n            }));\r\n        }\r\n        if (abundanceList.includes('rare')) {\r\n            newList = newList.concat(temporaryList.filter(mineral => {\r\n                return abundanceLevels.rare.includes(mineral) === true;\r\n            }));\r\n        }\r\n        if (difficultyList.includes('hard')) {\r\n            for (let mineral in hardMinerals) {\r\n                if (newList.includes(mineral)) {\r\n                    newList.splice(newList.indexOf(mineral), 1)\r\n                    newList = newList.concat(hardMinerals[mineral])\r\n                };\r\n                continue\r\n            };\r\n        };\r\n        let newCustomMinerals = Array.from(this.state.customMinerals);\r\n        let newUnselectedMinerals = Array.from(this.state.unselectedMinerals);\r\n        const name = this.state.currentName;\r\n        const value = this.state.currentValue;\r\n        switch (name) {\r\n            case 'common':\r\n            case 'rare':\r\n                if (value === true) {\r\n                    newUnselectedMinerals = newUnselectedMinerals.filter(mineral => {\r\n                        return abundanceLevels[name].includes(mineral) === false\r\n                    })\r\n                } else {\r\n                    newCustomMinerals = newCustomMinerals.filter(mineral => {\r\n                        return abundanceLevels[name].includes(mineral) === false\r\n                    })\r\n                }\r\n                break;\r\n            case 'all':\r\n                if (value === true) {\r\n                    newUnselectedMinerals = [];\r\n                } else {\r\n                    newCustomMinerals = [];\r\n                }\r\n                break;\r\n            case 'volcanic':\r\n            case 'metamorphic':\r\n            case 'ore':\r\n            case 'other':\r\n                if (value === true) {\r\n                    newUnselectedMinerals = newUnselectedMinerals.filter(mineral => {\r\n                        return mineralTypes[name].includes(mineral) === false\r\n                    })\r\n                } else {\r\n                    newCustomMinerals = newCustomMinerals.filter(mineral => {\r\n                        return mineralTypes[name].includes(mineral) === false\r\n                    })\r\n                }\r\n                break;\r\n        }\r\n        newList = newList.concat(newCustomMinerals)\r\n        let unselected = Array.from(newUnselectedMinerals);\r\n        unselected.forEach(mineral => {\r\n            if (newList.includes(mineral)) {\r\n                newList.splice(newList.indexOf(mineral), 1);\r\n            };\r\n        })\r\n        let allList = [];\r\n        for (let level in abundanceLevels) {\r\n            allList = allList.concat(abundanceLevels[level]);\r\n        };\r\n        if (difficultyList.includes('hard')) {\r\n            for (let mineral in hardMinerals) {\r\n                if (allList.includes(mineral)) {\r\n                    allList.splice(allList.indexOf(mineral), 1)\r\n                    allList = allList.concat(hardMinerals[mineral])\r\n                };\r\n                continue\r\n            };\r\n        };\r\n        let mineralChecked = {};\r\n        allList.forEach(mineral => {\r\n            if (newList.includes(mineral)) {\r\n                mineralChecked[mineral] = true\r\n            } else {\r\n                mineralChecked[mineral] = false\r\n            }\r\n        });\r\n        let mergedList = Object.assign(mineralChecked, {\r\n            allMinerals: allList,\r\n            customMinerals: newCustomMinerals,\r\n            unselectedMinerals: newUnselectedMinerals\r\n        })\r\n        this.setState(mergedList, this.makeMineralOptions)\r\n    }\r\n    makeMineralOptions () {\r\n        let mineralList = [];\r\n        mineralList = this.state.allMinerals.sort().map(mineral => {\r\n            return  (<div className='customList'><label className='choices'>\r\n                        <input type=\"checkbox\" name={mineral} checked={this.state[mineral]} onChange={this.handleChange2} className='checkboxes'/>\r\n                        {mineral}\r\n                    </label></div>)\r\n        })\r\n        this.setState({\r\n            customList: mineralList\r\n        })\r\n    }\r\n    handleClick2 (event) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            show2: !(this.state.show2)\r\n        }, this.makeCustomList);\r\n    }\r\n    render () {\r\n        if (this.props.page === 'form') {\r\n            let advancedShow = this.state.show === true ? { display: 'block' } : { display: 'none' };\r\n            return (\r\n                <div id='bigDiv'>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <div className='checkForm' id='mode'>\r\n                            <label className='category'>\r\n                                Mode:\r\n                                <div className='options'>\r\n                                    <label className='choices'>\r\n                                        <input type=\"checkbox\" name='visual' checked={this.state.visual} onChange={this.handleChange} className='checkboxes'/>\r\n                                        Visual (picture + basic properies)\r\n                                    </label>\r\n                                    <label className='choices'>\r\n                                        <input type=\"checkbox\" name='text' checked={this.state.text} onChange={this.handleChange} className='checkboxes'/>\r\n                                        Text (key properties)\r\n                                    </label>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n                        <div className='checkForm'>\r\n                            <label className='category'>\r\n                                Difficulty:\r\n                                <div className='options'>\r\n                                    <label className='choices'>\r\n                                        <input type=\"checkbox\" name='basic' checked={this.state.basic} onChange={this.handleChange} className='checkboxes'/>\r\n                                        Basic\r\n                                    </label>\r\n                                    <label className='choices'>\r\n                                        <input type=\"checkbox\" name='hard' checked={this.state.hard} onChange={this.handleChange} className='checkboxes'/>\r\n                                        Hard\r\n                                    </label>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n                        <div className='checkForm'>\r\n                            <label className='category'>\r\n                                Abundance:\r\n                                <div className='options'>\r\n                                    <label className='choices'>\r\n                                        <input type=\"checkbox\" name='common' checked={this.state.common} onChange={this.handleChange} className='checkboxes'/>\r\n                                        Common\r\n                                    </label>\r\n                                    <label className='choices'>\r\n                                        <input type=\"checkbox\" name='rare' checked={this.state.rare} onChange={this.handleChange} className='checkboxes'/>\r\n                                        Rare\r\n                                    </label>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n                        <div className='checkForm'>\r\n                            <label className='category'>\r\n                                Mineral types:\r\n                                <div className='options'>\r\n                                    <label className='choices'>\r\n                                        <input type=\"checkbox\" name='all' checked={this.state.all} onChange={this.handleChange} className='checkboxes'/>\r\n                                        All\r\n                                    </label>\r\n                                    <label className='choices'>\r\n                                        <input type=\"checkbox\" name='volcanic' checked={this.state.volcanic} onChange={this.handleChange} className='checkboxes'/>\r\n                                        Volcanic\r\n                                    </label>\r\n                                    <label className='choices'>\r\n                                        <input type=\"checkbox\" name='metamorphic' checked={this.state.metamorphic} onChange={this.handleChange} className='checkboxes'/>\r\n                                        Metamorphic\r\n                                    </label>\r\n                                    <label className='choices'>\r\n                                        <input type=\"checkbox\" name='ore' checked={this.state.ore} onChange={this.handleChange} className='checkboxes'/>\r\n                                        Ore\r\n                                    </label>\r\n                                    <label className='choices'>\r\n                                        <input type=\"checkbox\" name='other' checked={this.state.other} onChange={this.handleChange} className='checkboxes'/>\r\n                                        Other\r\n                                    </label>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n                        <div className='checkForm'>\r\n                            <p className='category' id='advanced'>Advanced Options</p>\r\n                            <button className='formButton' id='show' onClick={this.handleClick}>{this.state.show === false ? 'Show' : 'Hide'}</button>\r\n                            <div style={advancedShow} className='advancedInput'>\r\n                                <label className='numberInput'>\r\n                                    Number of rounds after a wrong answer: \r\n                                    <input \r\n                                        type='number'\r\n                                        name='roundsAfterWrong'\r\n                                        value={this.state.roundsAfterWrong}\r\n                                        onChange={this.handleChange}\r\n                                        min='0'\r\n                                        step='1'\r\n                                        required/>\r\n                                </label>\r\n                                <label className='numberInput'>\r\n                                    Number of guesses: \r\n                                    <input \r\n                                        type='number'\r\n                                        name='guesses'\r\n                                        value={this.state.guesses}\r\n                                        onChange={this.handleChange}\r\n                                        min='0'\r\n                                        step='1'\r\n                                        required/>\r\n                                </label>\r\n                                <p id='customHeadline'>Custom selection:</p>\r\n                                <button onClick={this.handleClick2} name='openOrClose' className='formButton' id='openOrClose'>{this.state.show2 === true ? 'Close' : 'Open'}</button>\r\n                                <div>\r\n                                    {this.state.show2 === true ? this.state.customList : null}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <input type='submit' value='Go!' id='go' className='formButton'/>\r\n                    </form>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<div></div>);\r\n        }\r\n    }\r\n}","export const mineralList = {\r\n    quartz: {\r\n        clues: ['hardness 7', 'no cleavage', 'conchoidal fructure'],\r\n        properties: {\r\n            hardness: 'can scratch glass',\r\n            streak: 'white streak',\r\n            reactionWithAcid: 'no reaction with hydrochloric acid'\r\n        }\r\n    },\r\n    pyrite: {\r\n        clues: ['cubic crystals', 'metallic lustre', 'black streak'],\r\n        properties: {\r\n            hardness: 'not scratched by a pocket knife (5.5), but does not scratch glass',\r\n            streak: 'black streak',\r\n            reactionWithAcid: 'no reaction with hydrochloric acid, but may produce a rotten egg smell'\r\n        }\r\n    },\r\n    cinnabar: {\r\n        clues: ['very high density (8.1)', 'often associated with native mercury', 'vivid red colour']\r\n    },\r\n    halite: {\r\n        clues: ['salty taste', 'cubic crystals', 'easily soluble in water', 'evaporite mineral']\r\n    },\r\n    calcite: {\r\n        clues: ['reacts with vigorously HCl', 'can be scratched by a copper penny']\r\n    },\r\n    malachite: {\r\n        clues: ['botryoidal habit', 'strong dark green colour', 'major copper ore']\r\n    },\r\n    tourmaline: {\r\n        clues: ['occurs in acidic igneous rocks', 'often abrupt changes of colour throughout a single crystal', 'rounded triangular cross-section in prismatic crystals']\r\n    },\r\n    biotite: {\r\n        clues: ['black leafy crystals', 'perfect basal cleavage', 'mafic mica mineral']\r\n    },\r\n    garnet: {\r\n        clues: ['index mineral in metamorphic rocks', 'dodecahedral crystals', 'typically dark red colour']\r\n    },\r\n    feldspar: {\r\n        clues: ['90 cleavage with pearly lustre', 'the most common mineral group', '2 major subgroups: plagioclase and alkali members']\r\n    },\r\n    mica: {\r\n        clues: ['perfect basal cleavage', 'hydrated phyllosilicates', 'strong pearly lustre looking like glitter']\r\n    },\r\n    plagioclase: {\r\n        clues: ['lamellar twinning', '90° cleavage', 'sodium (albite) and calcium (anorthite) end members']\r\n    },\r\n    alkali_feldspars: {\r\n        clues: ['carlsbad twins', '90° cleavage', 'typically gray to pink colour']\r\n    },\r\n    muscovite: {\r\n        clues: ['white leafy crystals', 'felsic mica mineral', 'perfect basal cleavage']\r\n    },\r\n    hematite: {\r\n        clues: ['red streak with mettalic or dull lustre', 'botryoidal form called reniform', 'important metal ore']\r\n    },\r\n    baryte: {\r\n        clues: ['tabular white crystals', 'common mineral in hydrothermal veins (often with other ore minerals such as galena or chalcopyrite)', 'higher density (4.5) than most other pale-coloured minerals']\r\n    },\r\n    fluorite: {\r\n        clues: ['hardness 4']\r\n    },\r\n    aragonite: {\r\n        clues: ['hexagonal crystal habit']\r\n    },\r\n    dolomite: {\r\n        clues: ['curved rhombohedral crystals']\r\n    }\r\n};","import React from 'react';\r\nimport './game.css';\r\nimport {mineralList} from '../Game/mineralList';\r\nimport PinchZoomPan from \"react-responsive-pinch-zoom-pan\";\r\n\r\nexport class Game extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            shownClues: [],\r\n            shownProps: [],\r\n            shownPropTypes: [],\r\n            image1: {\r\n                checked: false,\r\n                mineral: ' '\r\n                },\r\n            image2: {\r\n                checked: false,\r\n                mineral: ' '\r\n                },\r\n            image3: {\r\n                checked: false,\r\n                mineral: ' '\r\n                },\r\n            image4: {\r\n                checked: false,\r\n                mineral: ' '\r\n                },\r\n            buttonHard: true,\r\n            buttonStreak: true,\r\n            buttonAcid: true,\r\n            testUse: 0,\r\n            displayedPictures: []\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleChange2 = this.handleChange2.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleClick2 = this.handleClick2.bind(this);\r\n    }\r\n    handleSubmit (event) {\r\n        event.preventDefault();\r\n        if (this.props.gameType === 'uncover') {\r\n            if (this.props.answer !== this.props.chosenMineral) {\r\n                if (this.props.guessNumber === 0) {\r\n                    let newCompareWith = (\r\n                        <div>\r\n                            <p>{this.capitaliseFirst(this.props.answer)}</p>\r\n                            <img \r\n                                src={`${process.env.PUBLIC_URL}/Images/${this.props.answer}1.jpg`} \r\n                                width='350'/>\r\n                        </div>\r\n                    );\r\n                    this.props.updateWrongAnswers(this.props.chosenPicture);\r\n                    this.props.updateSelect(this.props.answer, newCompareWith, true);\r\n                };\r\n                if (this.props.guessNumber === this.props.guesses) {\r\n                    this.props.changePage('aftergame');\r\n                    this.props.resetGuessNumber();\r\n                    this.setState({\r\n                        buttonHard: true,\r\n                        buttonStreak: true,\r\n                        buttonAcid: true,\r\n                        testUse: 0\r\n                    });\r\n                } else {\r\n                    this.props.changePopup();\r\n                };\r\n            } else {\r\n                this.setState({\r\n                    shownClues: [],\r\n                    buttonHard: true,\r\n                    buttonStreak: true,\r\n                    buttonAcid: true,\r\n                    testUse: 0\r\n                });\r\n                this.props.changePage('aftergame');\r\n                this.props.resetGuessNumber();\r\n            };\r\n        } else {\r\n            let i = false;\r\n            let No = 0;\r\n            let chosenImage;\r\n            let imageName = 'unknown';\r\n            while (i === false && No < 4) {\r\n                No++\r\n                imageName = `image${No}`\r\n                if (this.state[imageName].checked === true) {\r\n                    i = true\r\n                    chosenImage = imageName;\r\n                };\r\n            };\r\n            if (this.state[chosenImage].mineral !== this.props.chosenMineral) {\r\n                if (this.props.guessNumber === 0) {\r\n                    let newCompareWith = (\r\n                        <div>\r\n                            <p>{this.capitaliseFirst(this.state[chosenImage].mineral)}</p>\r\n                            <img \r\n                                src={`${process.env.PUBLIC_URL}/Images/${this.props.answer}1.jpg`} \r\n                                width='350'/>\r\n                        </div>\r\n                    );\r\n                    this.props.updateWrongAnswers(this.props.chosenPicture);\r\n                    this.props.updateSelect(this.state[chosenImage].mineral, newCompareWith, true);\r\n                };\r\n                if (this.props.guessNumber === this.props.guesses) {\r\n                    this.props.changePage('aftergame');\r\n                    this.props.resetGuessNumber();\r\n                    this.props.changeAnswer(this.state[chosenImage].mineral);\r\n                    let newImageSet = {};\r\n                    newImageSet.checked = false;\r\n                    newImageSet.mineral = ' ';\r\n                    let newImage1Set = {};\r\n                    newImage1Set.checked = true;\r\n                    newImage1Set.mineral = ' ';\r\n                    this.setState({\r\n                        displayedPictures: [],\r\n                        image1: newImage1Set,\r\n                        image2: newImageSet,\r\n                        image3: newImageSet,\r\n                        image4: newImageSet\r\n                    });\r\n                } else {\r\n                    this.props.changePopup();\r\n                };\r\n            } else {\r\n                this.props.changeAnswer(this.state[chosenImage].mineral);\r\n                let newImageSet = {};\r\n                newImageSet.checked = false;\r\n                newImageSet.mineral = ' ';\r\n                let newImage1Set = {};\r\n                newImage1Set.checked = true;\r\n                newImage1Set.mineral = ' ';\r\n                this.setState({\r\n                    shownClues: [],\r\n                    displayedPictures: [],\r\n                    image1: newImage1Set,\r\n                    image2: newImageSet,\r\n                    image3: newImageSet,\r\n                    image4: newImageSet\r\n                });\r\n                this.props.changePage('aftergame');\r\n                this.props.resetGuessNumber();\r\n            };\r\n        };\r\n        \r\n    }\r\n    handleChange (event) {\r\n        let submitted = event.target.value;\r\n        this.props.changeAnswer(submitted);\r\n    }\r\n    handleChange2 (event) {\r\n        let name = event.target.name;\r\n        let imageChecked = event.target.checked;\r\n        let imageArray = ['image1', 'image2', 'image3', 'image4'];\r\n        imageArray.splice(imageArray.indexOf(name), 1);\r\n        if (imageChecked === true) {\r\n            let [imageX, imageY, imageZ] = imageArray;\r\n            let variableSet = ['X', 'Y', 'Z', 'imageTrue'];\r\n            let newVariableSet = [];\r\n            let index;\r\n            variableSet.forEach(variable => {\r\n                newVariableSet.push({});\r\n                index = variableSet.indexOf(variable);\r\n                if (index === 3) {\r\n                    newVariableSet[index].checked = true\r\n                    newVariableSet[index].mineral = event.target.value;\r\n                } else {\r\n                    newVariableSet[index].checked = false\r\n                    newVariableSet[index].mineral = this.state[imageArray[index]].mineral\r\n                };\r\n            })\r\n            this.props.changeAnswer(newVariableSet[3].mineral)\r\n            this.setState({\r\n                [name]: newVariableSet[3],\r\n                [imageX]: newVariableSet[0],\r\n                [imageY]: newVariableSet[1],\r\n                [imageZ]: newVariableSet[2]\r\n             });\r\n        } else {\r\n            let imageNumber = parseInt(name[-1]);\r\n            this.setState({ [`image${imageNumber + 1}`]: true });\r\n        };\r\n    }\r\n    capitaliseFirst (name) {\r\n        let mineral = name.charAt(0).toUpperCase() + name.slice(1);\r\n        return mineral\r\n    }\r\n    handleClick () {\r\n        let newClue;\r\n         if (this.props.clues === 'zero') {\r\n            newClue = null;\r\n         } else if (this.props.clues.length >= 1) {\r\n            do {\r\n                newClue = this.props.clues[Math.floor(Math.random() * this.props.clues.length)];\r\n            } while ( this.state.shownClues.includes(newClue) === true || this.props.chosenClue === newClue);\r\n        } else {\r\n            newClue = 'There are no more clues available.';\r\n        };\r\n        let newList = Array.from(this.state.shownClues);\r\n        if (newClue) {\r\n            newList.push(newClue);\r\n            this.setState({\r\n                shownClues: newList\r\n            });\r\n            this.props.removeClues(newClue);\r\n        }\r\n    }\r\n    handleClick2 (event) {\r\n        let property = event.target.name;\r\n        let testUseVar = this.state.testUse + 1;\r\n        if (testUseVar === this.props.testLimit) {\r\n            this.setState({\r\n                buttonHard: property === 'hardness' ? true : false,\r\n                buttonStreak: property === 'streak' ? true : false,\r\n                buttonAcid: property === 'reactionWithAcid' ? true : false,\r\n                testUse: testUseVar\r\n            });\r\n        };\r\n        let prop;\r\n        if (this.state.shownPropTypes.includes(property) === false && testUseVar <= this.props.testLimit) {\r\n            try {\r\n               if (mineralList[this.props.chosenMineral].properties !== undefined) {\r\n                    if (property in mineralList[this.props.chosenMineral].properties) {\r\n                        prop = mineralList[this.props.chosenMineral].properties[property];\r\n                    } else {\r\n                        prop = 'not yet defined property'\r\n                    };\r\n                } else {\r\n                    prop = 'not yet defined property'\r\n                };\r\n            } catch (err) {\r\n                prop = 'not yet defined property'\r\n            }\r\n            let newShownProps = Array.from(this.state.shownProps);\r\n            newShownProps.push(prop);\r\n            let newShownPropTypes = Array.from(this.state.shownPropTypes);\r\n            newShownPropTypes.push(property);\r\n            this.setState((state, props) => ({\r\n                shownProps: newShownProps,\r\n                shownPropTypes: newShownPropTypes,\r\n                testUse: testUseVar\r\n            }));\r\n        } else if (testUseVar === this.props.testLimit + 1) {\r\n            let newShownProps = Array.from(this.state.shownProps);\r\n            newShownProps.push(`Note: you can only choose ${this.props.testLimit} property to test.`);\r\n            this.setState((state, props) => ({\r\n                shownProps: newShownProps,\r\n                testUse: testUseVar\r\n            }));\r\n        }\r\n    }\r\n    render () {\r\n        if (this.props.page === 'game') {\r\n            if (this.props.gameType === 'uncover') {\r\n                if (this.props.resetShownClues === true) {\r\n                    this.setState({\r\n                        shownClues: [],\r\n                        shownProps: [],\r\n                        shownPropTypes: [],\r\n                        buttonHard: true,\r\n                        buttonStreak: true,\r\n                        buttonAcid: true,\r\n                        testUse: 0\r\n                    }, this.props.changeResetShownClues());\r\n                };\r\n                let optionsList = this.props.updatedList.sort().map(mineral => {\r\n                    return <option value={`${mineral}`} className='select'>{mineral}</option>\r\n                });\r\n                let clues_list = Array.from(this.state.shownClues)\r\n                clues_list.unshift(this.props.chosenClue)\r\n                let displayedClues = clues_list.map(clue => {\r\n                    return <p>{clue}</p>\r\n                });\r\n                let props_list = Array.from(this.state.shownProps)\r\n                let displayedProps = props_list.map(prop => {\r\n                    return <p>{prop}</p>\r\n                });\r\n                return (\r\n                    <div className='game'>\r\n                        {this.props.mode === 'visual'? (\r\n                            <div>\r\n                                <h1>Uncover the mystery mineral</h1>\r\n                                <main className='imageContainer'>\r\n                                    <PinchZoomPan maxScale='1.5'>\r\n                                        <img \r\n                                            src={`${process.env.PUBLIC_URL}/Images/${this.props.chosenPicture}.jpg`}\r\n                                            id='image'/>\r\n                                    </PinchZoomPan>\r\n                                </main>\r\n                                <div>\r\n                                    <button name='hardness' className={this.state.buttonHard === true ? 'guess' : 'guessFaded'} onClick={this.handleClick2}>Hardness</button>\r\n                                    <button name='streak' className={this.state.buttonStreak === true ? 'guess' : 'guessFaded'} onClick={this.handleClick2}>Streak</button>\r\n                                    <button name='reactionWithAcid' className={this.state.buttonAcid === true ? 'guess' : 'guessFaded'} onClick={this.handleClick2}>Acid test</button>\r\n                                </div>\r\n                                {displayedProps}\r\n                                <form onSubmit={this.handleSubmit}>\r\n                                    <select className='guess' id='guess' required onChange={this.handleChange}>\r\n                                        <option value=' '>Choose the mineral:</option>\r\n                                        {optionsList}\r\n                                    </select>\r\n                                    <input type='submit' value='Check' id='check' className='check' checked/>\r\n                                </form>\r\n                            </div>\r\n                            ) : (\r\n                            <div>\r\n                                <h1>Uncover the mystery mineral</h1>\r\n                                {displayedClues}\r\n                                <button className='guess' onClick={this.handleClick}>Add a clue</button>\r\n                                <form onSubmit={this.handleSubmit}>\r\n                                    <select className='guess' required onChange={this.handleChange}>\r\n                                        <option value=' '>Choose the mineral:</option>\r\n                                        {optionsList}\r\n                                    </select>\r\n                                    <input type='submit' value='Check' className='check'/>\r\n                                </form>\r\n                            </div>\r\n                            )\r\n                            }\r\n                    </div>\r\n                );\r\n            } else if (this.props.gameType === 'array') {\r\n                if (this.props.resetShownClues === true) {\r\n                    let newImageSet = {};\r\n                    newImageSet.checked = false;\r\n                    newImageSet.mineral = ' ';\r\n                    let newImage1Set = {};\r\n                    newImage1Set.checked = true;\r\n                    newImage1Set.mineral = ' ';\r\n                    this.setState({\r\n                        shownClues: [],\r\n                        image1: newImage1Set,\r\n                        image2: newImageSet,\r\n                        image3: newImageSet,\r\n                        image4: newImageSet,\r\n                        displayedPictures: []\r\n                    }, this.props.changeResetShownClues());\r\n                };\r\n                if (this.state.displayedPictures.length === 0) {\r\n                    let displayedImages = Array.from(this.props.randomArray);\r\n                    displayedImages = displayedImages.map(item => item + '1');\r\n                    displayedImages.splice(Math.floor(Math.random() * displayedImages.length), 0, this.props.chosenPicture);\r\n                    this.setState({ displayedPictures: displayedImages });\r\n                };\r\n                let currentImages = Array.from(this.state.displayedPictures);\r\n                let i = 0;\r\n                let if_checker = false\r\n                let image_array = currentImages.map(mineral => {\r\n                    i++\r\n                    let mineralName = mineral.split(\"\").filter(character => isNaN(character) === true).toString();\r\n                    mineralName = mineralName.replace(/,/g, '');\r\n                    if (this.state.image1.mineral === ' ' && i === 1) {\r\n                        let newImage1Set = {};\r\n                        newImage1Set.checked = true;\r\n                        newImage1Set.mineral = mineralName;\r\n                        if_checker = true\r\n                        this.setState({\r\n                            image1: newImage1Set\r\n                        });\r\n                    };\r\n                    return (<label className='imageArray'>\r\n                                <input type=\"radio\" name={`image${i}`} value={`${mineralName}`} checked={this.state[`image${i}`].checked} onChange={this.handleChange2}/>\r\n                                <img \r\n                                    src={`${process.env.PUBLIC_URL}/Images/${mineral}.jpg`}\r\n                                    height='150'/>\r\n                            </label>)\r\n                });\r\n                return (\r\n                    <div>\r\n                        <h1>Which picture is {this.props.chosenMineral}?</h1>\r\n                        {/* Adapted from https://stackoverflow.com/questions/17541614/use-images-instead-of-radio-buttons/17541916 */}\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            {image_array}\r\n                            <input type='submit' value='Check' className='check' id='arrayCheck'/>\r\n                        </form>\r\n                    </div>\r\n                )\r\n            };  \r\n        } else {\r\n        return <div></div>\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport './aftergame.css';\r\nimport {mineralTypes, hardMinerals} from '../Form/preferencesLists';\r\n\r\nexport const wrongList = {};\r\n\r\nexport class Aftergame extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            column: null,\r\n            row: null\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleClick2 = this.handleClick2.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleClick () {\r\n        this.props.changePage('game');\r\n        this.props.changeMineral();\r\n        this.resetSelect();\r\n    }\r\n    handleClick2 () {\r\n        this.props.annulateMinList();\r\n        this.props.changePage('form');\r\n        this.resetSelect();\r\n    }\r\n    resetSelect () {\r\n        this.props.updateSelect(' ', null, false);\r\n    }\r\n    handleChange (event) {\r\n        let selectValue = event.target.value;\r\n        if (selectValue === ' ') {\r\n            this.props.updateSelect(' ', null, false);\r\n        } else {\r\n            let mineralID;\r\n            if (selectValue.includes(' ')) {\r\n                mineralID = selectValue.replace(' ', '_')\r\n            } else {\r\n                mineralID = `${selectValue}`\r\n            };\r\n            let newCompareWith = (\r\n                <div>\r\n                    <p>{this.capitaliseFirst(selectValue)}</p>\r\n                    <img \r\n                        src={`${process.env.PUBLIC_URL}/Images/${mineralID}1.jpg`} \r\n                        width='350'/>\r\n                </div>\r\n            );\r\n            this.props.updateSelect(selectValue, newCompareWith, true);\r\n        }\r\n    }\r\n    capitaliseFirst (name) {\r\n        let mineral = name.charAt(0).toUpperCase() + name.slice(1);\r\n        return mineral\r\n    }\r\n    render () {\r\n        if (this.props.page === 'aftergame') {\r\n            let answerValidation;\r\n            if (this.props.answer === this.props.chosenMineral) {\r\n                answerValidation = 'correct';\r\n            } else {\r\n                answerValidation = 'wrong';\r\n            };\r\n            let allMinerals = [];\r\n            for (let type in mineralTypes) {\r\n                allMinerals = allMinerals.concat(mineralTypes[type]);\r\n            };\r\n            for (let mineral in hardMinerals) {\r\n                allMinerals.splice(allMinerals.indexOf(mineral), 1)\r\n                allMinerals = allMinerals.concat(hardMinerals[mineral])\r\n                continue\r\n            };\r\n            let options = allMinerals.sort().map(mineral => {\r\n                return <option value={`${mineral}`}>{mineral}</option>\r\n            });\r\n            let mineralID;\r\n            if (this.props.chosenMineral.includes(' ')) {\r\n                mineralID = this.props.chosenMineral.replace(' ', '_')\r\n            } else {\r\n                mineralID = `${this.props.chosenMineral}`\r\n            };\r\n            return (\r\n                <div className='aftergame'>\r\n                    {this.props.minListLength === 0 ? \r\n                        <p>You identified all the available minerals in the quizz.</p>\r\n                        : null }\r\n                    <p>{answerValidation === 'correct' ? 'Congratulations, you were right!' : 'Unfortunately, your guess was incorrect.'} {this.props.gameType !== 'uncover' ? `The mineral was ${this.props.chosenMineral}.`: null}</p>\r\n                    {this.props.gameType !== 'array' ?\r\n                    <div>\r\n                        <p>{`${this.props.chosenMineral.charAt(0).toUpperCase() + this.props.chosenMineral.slice(1)} was`}</p>\r\n                        <img \r\n                            src={`${process.env.PUBLIC_URL}/Images/${this.props.chosenMineral}1.jpg`}\r\n                            height='150'/>\r\n                    </div> : null}\r\n                    {this.props.minListLength === 0 ? \r\n                        <button onClick={this.handleClick} id='startAgain'>Start again</button>\r\n                        : <button onClick={this.handleClick} id='continue'>Continue</button> }\r\n                    <button onClick={this.handleClick2}>Change Preferences</button>\r\n                    <label className='select'>\r\n                        Compare with:\r\n                        <select id='guess' className='guess' required onChange={this.handleChange} value={this.props.select}>\r\n                            <option value=' '> </option>\r\n                            {options}\r\n                        </select>\r\n                    </label>\r\n                    <div className={this.props.activated === true ? 'row' : 'inactive'}>\r\n                        <div className={this.props.activated === true ? 'column' : 'inactive'}>\r\n                            <p>{this.capitaliseFirst(this.props.chosenMineral)}</p>\r\n                            <img \r\n                                src={`${process.env.PUBLIC_URL}/Images/${mineralID}1.jpg`} \r\n                                width='350'/>\r\n                        </div>\r\n                        <div className={this.props.activated === true ? 'column' : 'inactive'}>\r\n                            {this.props.compareWith}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport './pop-up.css';\r\n\r\nexport class Popup extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleClick2 = this.handleClick2.bind(this);\r\n    }\r\n    handleClick () {\r\n        this.props.changePopup();\r\n    }\r\n    handleClick2 () {\r\n        this.props.changePopup();\r\n        this.props.changePage('aftergame');\r\n        this.props.resetGuessNumber();\r\n    }\r\n    render () {\r\n        return (\r\n            <div className='popup'>\r\n                <p>Your guess was not correct. Keep trying!</p>\r\n                <button onClick={this.handleClick}>Try Again</button>\r\n                <button onClick={this.handleClick2} id='giveup'>Reveal</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Start} from '../Start/start';\r\nimport {Form} from '../Form/form';\r\nimport {Game} from '../Game/game';\r\nimport {Aftergame} from '../Aftergame/aftergame';\r\nimport {Popup} from '../Game/pop-up/pop-up';\r\nimport {mineralList} from '../Game/mineralList';\r\n\r\nlet randomMineral = '';\r\nexport let updatedMinList = [];\r\n\r\nfunction getKeyByValue(object, value) {\r\n    return Object.keys(object).find(key => object[key] === value);\r\n}\r\nexport class Page extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            page: 'start',\r\n            answer: '',\r\n            chosenMineral: '',\r\n            wrong: {},\r\n            updatedList: [],\r\n            currentList: [],\r\n            showPopup: false,\r\n            guessNumber: 0,\r\n            roundsAfterWrong: 2,\r\n            guesses: 2,\r\n            firstWrong: ' ',\r\n            select: ' ',\r\n            compareWith: null,\r\n            activated: false,\r\n            mode: null,\r\n            clues: [],\r\n            chosenClues: [],\r\n            resetShownClues: false,\r\n            game: 'uncover',\r\n            randomArray: [],\r\n            testLimit: 1,\r\n            picturesLog: {},\r\n            chosenPicture: ''\r\n        };\r\n        this.changePage = this.changePage.bind(this);\r\n        this.changeAnswer = this.changeAnswer.bind(this);\r\n        this.changeMineral = this.changeMineral.bind(this);\r\n        this.updateWrongAnswers = this.updateWrongAnswers.bind(this);\r\n        this.changePreferences = this.changePreferences.bind(this);\r\n        this.changePopup = this.changePopup.bind(this);\r\n        this.resetGuessNumber = this.resetGuessNumber.bind(this);\r\n        this.annulateMinList = this.annulateMinList.bind(this);\r\n        this.updateSelect = this.updateSelect.bind(this);\r\n        this.removeClues = this.removeClues.bind(this);\r\n        this.changeResetShownClues = this.changeResetShownClues.bind(this);\r\n    }\r\n    changePage (newPage) {\r\n        if (newPage === 'Aftergame') {\r\n            this.setState({\r\n                page: newPage,\r\n                resetShownClues: true\r\n            });\r\n        } else {\r\n            this.setState({\r\n                page: newPage\r\n            });\r\n        };\r\n    }\r\n    changeAnswer (newAnswer) {\r\n        this.setState({answer: newAnswer});\r\n    }\r\n    updateWrongAnswers (wrongPicture) {\r\n        let wrongAnswer = {};\r\n        wrongAnswer[wrongPicture] = this.state.roundsAfterWrong;\r\n        let updatedList = Object.assign(this.state.wrong, wrongAnswer)\r\n        this.setState({wrong: updatedList})\r\n    }\r\n    annulateMinList () {\r\n        updatedMinList = [];\r\n        this.setState({wrong: {}})\r\n    }\r\n    changeMineral () {\r\n        if (updatedMinList.length === 0) {\r\n            updatedMinList = Array.from(this.state.updatedList);\r\n        };\r\n        let newPictureLog = this.state.picturesLog;\r\n        let wrongList = this.state.wrong;\r\n        let foundWrong = false;\r\n        let randomPicture;\r\n        if (Object.values(wrongList).includes(0)) {\r\n            randomPicture = getKeyByValue(wrongList, 0);\r\n            let randomMineral = getKeyByValue(wrongList, 0);\r\n            delete wrongList[randomMineral];\r\n            randomMineral = randomMineral.split(\"\").filter(character => isNaN(character) === true).toString();\r\n            randomMineral = randomMineral.replace(/,/g, '')\r\n            foundWrong = true;\r\n        } else {\r\n            let randomNumber = Math.floor(Math.random() * updatedMinList.length);\r\n            randomMineral = updatedMinList[randomNumber];\r\n        };\r\n        const findAvailable = (mineral) => {\r\n            let maximumAchieved = false;\r\n            let counter = 0;\r\n            const tryRequire = (path) => {\r\n                try {\r\n                return require(`../../public/Images/${path}`);\r\n                } catch (err) {\r\n                return null;\r\n                }\r\n            };\r\n            while (maximumAchieved === false) {\r\n                counter++\r\n                let imagePath = `${mineral}${counter}.jpg`;\r\n                let checking = tryRequire(imagePath)\r\n                if (checking === null) {\r\n                    maximumAchieved = true;\r\n                };\r\n            };\r\n            counter--\r\n            let availableList = [];\r\n            let i = 0;\r\n            while (i < counter) {\r\n                i++\r\n                availableList.push(i)\r\n            };\r\n            return availableList;\r\n        };\r\n        if (randomMineral in this.state.picturesLog === false) {\r\n            newPictureLog[randomMineral] = findAvailable(randomMineral);\r\n            while (newPictureLog[randomMineral].length === 0) {\r\n                updatedMinList.splice(updatedMinList.indexOf(randomMineral), 1);\r\n                randomMineral = updatedMinList[Math.floor(Math.random() * updatedMinList.length)];\r\n                if (randomMineral in this.state.picturesLog === false) {\r\n                    newPictureLog[randomMineral] = findAvailable(randomMineral); \r\n                };\r\n                if (newPictureLog[randomMineral].length !== 0) {\r\n                    break;\r\n                };\r\n            };\r\n        };\r\n        let availableMinList = newPictureLog[randomMineral];\r\n        if (availableMinList.length !== 0 && foundWrong === false) {\r\n            randomPicture = availableMinList[Math.floor(Math.random() * availableMinList.length)];\r\n            availableMinList.splice(availableMinList.indexOf(randomPicture), 1);\r\n            newPictureLog[randomMineral] = availableMinList;\r\n            if (newPictureLog[randomMineral].length === 0) {\r\n                updatedMinList.splice(updatedMinList.indexOf(randomMineral), 1);\r\n            };\r\n        };\r\n        if (updatedMinList.length === 0 && Object.keys(wrongList).length > 0) {\r\n            let wrongMineral = Object.keys(wrongList)[0].split(\"\").filter(character => isNaN(character) === true).toString();\r\n            wrongMineral = wrongMineral.replace(/,/g, '')\r\n            updatedMinList.push(wrongMineral);\r\n            let wrongPicture = Object.keys(wrongList)[0].split(\"\").filter(character => isNaN(character) === false).toString();\r\n            wrongPicture = wrongPicture.replace(/,/g, '');\r\n            newPictureLog[wrongMineral] = [wrongPicture];\r\n            delete wrongList[Object.keys(wrongList)[0]];\r\n        };\r\n        for (let mineral in wrongList) {\r\n            wrongList[mineral] = wrongList[mineral] - 1\r\n        };\r\n        let mineralID;\r\n        if (randomMineral.includes(' ')) {\r\n            mineralID = randomMineral.replace(' ', '_')\r\n        } else {\r\n            mineralID = `${randomMineral}`\r\n        };\r\n        let newArray = []\r\n        if (this.state.game === 'array') {\r\n            let preferredMinerals = Array.from(this.state.updatedList);\r\n            if (preferredMinerals.includes(randomMineral)) {\r\n                preferredMinerals.splice(preferredMinerals.indexOf(randomMineral), 1)\r\n            };\r\n            let i;\r\n            for (i = 0; i < 3; i++) {\r\n                let newArrayElement = preferredMinerals[Math.floor(Math.random() * preferredMinerals.length)];\r\n                preferredMinerals.splice(preferredMinerals.indexOf(newArrayElement), 1);\r\n                newArray.push(newArrayElement);\r\n                if (preferredMinerals.length === 0) {\r\n                    i = 3\r\n                };\r\n            };\r\n        };\r\n        let cluesList;\r\n        try {\r\n            cluesList = Array.from(mineralList[mineralID].clues);\r\n        } catch (err) {\r\n            cluesList = ['Not available at the moment. Please, continue.']\r\n        };\r\n        let randomClue = cluesList[Math.floor(Math.random() * cluesList.length)]\r\n        cluesList.splice(cluesList.indexOf(randomClue), 1);\r\n        let newChosenPicture = `${randomMineral}${randomPicture}`\r\n        this.setState({\r\n            chosenMineral: randomMineral,\r\n            wrong: wrongList,\r\n            clues: cluesList,\r\n            chosenClues: randomClue,\r\n            randomArray: newArray,\r\n            picturesLog: newPictureLog,\r\n            chosenPicture: newChosenPicture\r\n        });\r\n    }\r\n    changePreferences (newList, inputRounds, inputGuesses, modeType) {\r\n        this.setState({\r\n            updatedList: newList,\r\n            roundsAfterWrong: inputRounds,\r\n            guesses: inputGuesses,\r\n            mode: modeType\r\n        }, this.changeMineral);\r\n    }\r\n    changePopup () { \r\n        let newGuessNumber = this.state.showPopup === false ? this.state.guessNumber + 1 : this.state.guessNumber;\r\n        this.setState({\r\n            showPopup: !(this.state.showPopup),\r\n            guessNumber: newGuessNumber\r\n        })\r\n    }\r\n    resetGuessNumber () {\r\n        let newGame = this.state.game === 'uncover' ? 'array' : 'uncover';\r\n        this.setState({\r\n            guessNumber: 0,\r\n            resetShownClues: true,\r\n            game: newGame\r\n        });\r\n    }\r\n    updateSelect (mineral, comparingMineral, trueOrFalse) {\r\n        this.setState({ \r\n            select: mineral,\r\n            compareWith: comparingMineral,\r\n            activated: trueOrFalse\r\n        });\r\n    }\r\n    removeClues (newClue) {\r\n        if (newClue === 'There are no more clues available.') {\r\n            this.setState({\r\n                clues: 'zero'\r\n            });\r\n        } else {\r\n            this.setState({\r\n                clues: this.state.clues.filter(clue => clue !== newClue)\r\n            });\r\n        }\r\n    }\r\n    changeResetShownClues () {\r\n        this.setState({\r\n            resetShownClues: false\r\n        });\r\n    }\r\n    render () {\r\n        return (\r\n            <div>\r\n                <Start \r\n                    page={this.state.page}\r\n                    changePage={this.changePage}/>\r\n                <Form \r\n                    page={this.state.page}\r\n                    changePage={this.changePage}\r\n                    changePreferences={this.changePreferences}\r\n                    changeMineral={this.changeMineral}/>\r\n                <Game \r\n                    page={this.state.page}\r\n                    chosenMineral={this.state.chosenMineral}\r\n                    changePage={this.changePage}\r\n                    changeAnswer={this.changeAnswer}\r\n                    updateWrongAnswers={this.updateWrongAnswers}\r\n                    answer={this.state.answer}\r\n                    changeMineral={this.changeMineral}\r\n                    changePopup={this.changePopup}\r\n                    guessNumber={this.state.guessNumber}\r\n                    resetGuessNumber={this.resetGuessNumber}\r\n                    updatedList={this.state.updatedList}\r\n                    roundsAfterWrong ={this.state.roundsAfterWrong}\r\n                    guesses={this.state.guesses}\r\n                    updateSelect={this.updateSelect}\r\n                    mode={this.state.mode}\r\n                    clues={this.state.clues}\r\n                    chosenClue={this.state.chosenClues}\r\n                    removeClues={this.removeClues}\r\n                    resetShownClues={this.state.resetShownClues}\r\n                    changeResetShownClues={this.changeResetShownClues}\r\n                    gameType={this.state.game}\r\n                    randomArray={this.state.randomArray}\r\n                    testLimit={this.state.testLimit}\r\n                    chosenPicture={this.state.chosenPicture}/>\r\n                <Aftergame\r\n                    chosenMineral={this.state.chosenMineral}\r\n                    minListLength ={updatedMinList.length}\r\n                    page={this.state.page}\r\n                    changePage={this.changePage}\r\n                    changeMineral={this.changeMineral}\r\n                    answer={this.state.answer}\r\n                    annulateMinList = {this.annulateMinList}\r\n                    wrong={this.state.wrong}\r\n                    firstWrong={this.state.firstWrong}\r\n                    select={this.state.select}\r\n                    updateSelect={this.updateSelect}\r\n                    compareWith={this.state.compareWith}\r\n                    activated={this.state.activated}\r\n                    gameType={this.state.game}/>\r\n                { this.state.showPopup === true ? \r\n                    <Popup \r\n                        changePopup={this.changePopup}\r\n                        changePage={this.changePage}\r\n                        resetGuessNumber={this.resetGuessNumber}/>\r\n                 : null }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Page} from './Page/page';\n\nfunction App () {\n  return (\n    <div>\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}